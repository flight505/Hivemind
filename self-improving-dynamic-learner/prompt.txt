
Based on the following dataset sample with 10 rows, create a Python function that perfectly predicts the 'Output' column (which has 4 categories: 1, 2, 3, 4).

Dataset structure:
- Input columns: A, B, C, D, E (all numeric)
- Output column: Output (categorical: 1-4)
- All columns including Output are provided for training

Sample data:
 A  B  C  D  E  Output
42 35 87 20 13       4
51 93  3 28 19       1
70 12 21 74 16       1
54 80 38 49 55       4
35 94 16 99  4       4
34 97 84 62 69       2
60 58 97 70 88       1
96 44 31 78 61       3
33 54 12 63 43       3
34  6 15  7 39       3

Requirements:
- Create a function called 'predict_output' that takes A, B, C, D, E as parameters
- The function should return the predicted category (1, 2, 3, or 4)
- Analyze the provided training data (including Output values) to learn patterns
- Use SIMPLE mathematical operations: arithmetic (+, -, *, /), comparisons (<, >, <=, >=), and basic logic
- Keep the function simple and readable - avoid complex formulas or domain-specific concepts
- Only return the Python function code, no explanations
- Do NOT use machine learning concepts, statistical methods, or domain-specific terminology
- Focus on basic mathematical relationships and conditional logic

Important Instructions:
- Get inspired by previous high-accuracy code examples but remain intelligently creative
- Explore new mathematical approaches using basic arithmetic and comparisons
- Reuse successful patterns and code structures that have shown potential from high accuracy samples
- Combine proven techniques from high-performing functions with new innovations
- Use simple mathematical operations: sums, differences, ratios, products, min/max, averages
- Avoid complex mathematical concepts, logarithms, exponentials, or trigonometric functions unless absolutely necessary
- Focus on clear, understandable mathematical relationships

Return only the Python function code in between ```python and ```:


💡 CURRENT BEST FUNCTION (Accuracy: 64.92%):
```python
def predict_output(A, B, C, D, E):
    if B >= 80:
        if C < 50:
            if D < 40:
                if C < 10:
                    return 1
                elif E > 50:
                    return 4
                else:
                    return 1
            else:
                if E < 20:
                    if D > 80 and C > 35:
                        return 3
                    elif C > 40:
                        return 2
                    else:
                        if A < 20:
                            return 1
                        else:
                            return 4
                elif E > 50 and C < 40:
                    if D > 90 and E > 90 and A < 25:
                        return 2
                    elif A < 25:
                        return 1
                    else:
                        return 4
                else:
                    if D >= 80 and E < 50:
                        return 4
                    elif C > 30 and E < 40:
                        return 2
                    elif E < 40:
                        return 1
                    elif D > 65 and E > 40 and C < 25:
                        return 4
                    else:
                        return 2
        else:
            if D < 50:
                if E > 80:
                    return 4
                else:
                    return 1
            else:
                if D > 90:
                    if E < 30:
                        return 1
                    elif E > 70:
                        return 1
                    else:
                        return 3
                elif E <= 35 or A > 60:
                    return 1
                else:
                    return 2
    else:
        if C > 50:
            if E < 20:
                if B >= 70 and E >= 10:
                    return 1
                elif B >= 70:
                    if E < 10:
                        return 1
                    else:
                        return 4
                else:
                    if 50 < B < 70 and E < 5 and C > 55:
                        return 2
                    if A > 90 or D > 50:
                        return 1
                    elif D < 20:
                        if E < 5:
                            return 4
                        else:
                            return 3
                    else:
                        return 4
            else:
                if D < 25:
                    if A < 50:
                        if D + E < 35 or (A > 30 and E < 40):
                            return 3
                        elif A < 20 and E < 50:
                            if D + E < 50:
                                return 3
                            else:
                                return 4
                        else:
                            if E > 50:
                                return 4
                            else:
                                return 1
                    elif E < 30:
                        return 3
                    elif E > 50:
                        return 1
                    else:
                        if E < 40:
                            return 1
                        else:
                            return 4
                else:
                    if B >= 75:
                        if A > 70:
                            return 1
                        else:
                            return 2
                    else:
                        if D < 40 and C > 60 and E < 35:
                            return 4
                        elif D < 30 and E < 30 and C > 70:
                            return 4
                        else:
                            return 1
        else:
            if E < 20:
                if D > 50:
                    if E < 10:
                        if C < 20:
                            return 1
                        else:
                            return 4
                    elif B > 50 or C < 10:
                        if A > 80:
                            return 2
                        else:
                            return 3
                    else:
                        return 1
                else:
                    if A > 50:
                        if D < 20 and E < 15:
                            return 3
                        else:
                            return 1
                    else:
                        if D > 40 and E < 10:
                            return 4
                        else:
                            return 3
            else:
                if E > 45 and D < 40:
                    if E > 70:
                        if A > 90 or B < 50:
                            return 4
                        else:
                            if B > 50:
                                if C > 35:
                                    return 2
                                else:
                                    return 1
                            else:
                                return 4
                    elif C < 5:
                        return 4
                    elif A > 70 and B < 20 and C < 20:
                        return 4
                    elif B > 40 or C > 45:
                        return 1
                    else:
                        return 1
                elif D > 50:
                    if E <= 40:
                        if B < 50 and C < 20:
                            return 4
                        elif C > 35 and E < 25:
                            return 4
                        else:
                            return 1
                    elif B < 40:
                        if A < 10:
                            return 1
                        elif C < 10:
                            return 4
                        else:
                            return 1
                    else:
                        if C < 20:
                            return 4
                        elif D > 90 and E > 80:
                            return 3
                        elif A > 80 or C < 20:
                            return 3
                        else:
                            return 1
                else:
                    if A > 70:
                        return 1
                    else:
                        if C > 20:
                            if E > 70 and B >= 20:
                                return 2
                            elif E > 70:
                                return 1
                            else:
                                if D < 25 and E < 40:
                                    if B > 50:
                                        return 1
                                    else:
                                        return 3
                                elif D < 30 and E < 45:
                                    if B >= 40:
                                        return 4
                                    else:
                                        return 3
                                else:
                                    return 1
                        else:
                            if E > 70:
                                return 4
                            elif C < 20 and E > 50:
                                return 4
                            else:
                                if D < 10 and C < 15 and B > 75:
                                    return 1
                                else:
                                    return 3
```

LEARN FROM THIS SUCCESS: Study the mathematical patterns and approaches that made this function effective.

🔧 CYCLE 1 IMPROVEMENT REQUEST
📊 CURRENT PERFORMANCE: The previous function achieved 49.47% accuracy (4947/10000 correct predictions)

Your previous predictor function made these specific mistakes on test data:
❌ PREDICTION ERROR #1:
   Input: A=50, B=24, C=77, D=15, E=97
   Your prediction: 2
   Correct output: 1
   Expected: Input(50, 24, 77, 15, 97) should give Output = 1
❌ PREDICTION ERROR #2:
   Input: A=25, B=82, C=34, D=86, E=2
   Your prediction: 4
   Correct output: 3
   Expected: Input(25, 82, 34, 86, 2) should give Output = 3
❌ PREDICTION ERROR #3:
   Input: A=78, B=13, C=23, D=38, E=16
   Your prediction: 1
   Correct output: 3
   Expected: Input(78, 13, 23, 38, 16) should give Output = 3
❌ PREDICTION ERROR #4:
   Input: A=57, B=95, C=81, D=88, E=20
   Your prediction: 2
   Correct output: 1
   Expected: Input(57, 95, 81, 88, 20) should give Output = 1
❌ PREDICTION ERROR #5:
   Input: A=53, B=73, C=70, D=10, E=44
   Your prediction: 4
   Correct output: 1
   Expected: Input(53, 73, 70, 10, 44) should give Output = 1
❌ PREDICTION ERROR #6:
   Input: A=52, B=8, C=22, D=49, E=1
   Your prediction: 1
   Correct output: 4
   Expected: Input(52, 8, 22, 49, 1) should give Output = 4
❌ PREDICTION ERROR #7:
   Input: A=94, B=35, C=66, D=26, E=2
   Your prediction: 4
   Correct output: 1
   Expected: Input(94, 35, 66, 26, 2) should give Output = 1
❌ PREDICTION ERROR #8:
   Input: A=89, B=37, C=33, D=9, E=40
   Your prediction: 3
   Correct output: 1
   Expected: Input(89, 37, 33, 9, 40) should give Output = 1
❌ PREDICTION ERROR #9:
   Input: A=92, B=36, C=12, D=6, E=30
   Your prediction: 3
   Correct output: 1
   Expected: Input(92, 36, 12, 6, 30) should give Output = 1
❌ PREDICTION ERROR #10:
   Input: A=18, B=94, C=85, D=12, E=20
   Your prediction: 2
   Correct output: 1
   Expected: Input(18, 94, 85, 12, 20) should give Output = 1
📈 IMPROVEMENT TARGET: Aim to exceed 49.47% accuracy by fixing these issues

📚 LEARNING OBJECTIVES:
1. Analyze the mathematical relationships between inputs (A, B, C, D, E) and correct outputs using basic arithmetic
2. Identify simple patterns that should map specific input combinations to correct outputs
3. Improve your mathematical formulas using sums, differences, ratios, and comparisons
4. Ensure generalization to similar patterns in the full dataset
5. Draw inspiration from successful patterns while exploring new approaches
6. Balance proven techniques with creative mathematical innovation
7. Focus on clear, understandable mathematical relationships - avoid complex or domain-specific concepts



🎨 CREATIVITY GUIDELINES:
- Study previous high-accuracy patterns for inspiration, not imitation
- Explore novel mathematical combinations using basic arithmetic
- Try creative combinations of sums, differences, ratios, and products
- Combine features in simple but effective ways (A+B, A-B, A*B, A/B, A+B-C, etc.)
- Avoid complex mathematical concepts or domain-specific terminology
- Be intelligently creative using basic mathematical operations




🎯 SPECIFIC CORRECTIONS NEEDED:

- When input values are like: (A=50, B=24, C=77), (A=25, B=82, C=34)
- The function should return: 1, 3
- Instead of returning: 2, 4

🔬 INNOVATION STRATEGIES:
- Study the conversation history for simple, effective patterns
- Try basic mathematical combinations: sums, differences, ratios, products
- Experiment with simple feature interactions: A+B, A-B, A*B, A/B, min(A,B), max(A,B)
- Consider conditional logic based on simple comparisons (A > B, A + B > C, etc.)
- Focus on clear, understandable mathematical relationships
- Be creative with basic operations - avoid complex formulas or domain-specific approaches

💡 CREATIVITY GUIDANCE:
- Reuse successful code patterns and structures from high accuracy samples that exist so far
- Combine the best elements from high-performing functions with new basic mathematical innovations
- Build incrementally upon proven successful approaches
- Think creatively with arithmetic operations while maintaining mathematical validity
- Consider simple multi-stage calculations using basic operations
- Never repeat code in its entirety - always modify and improve upon successful patterns





Generate an improved predictor function that correctly handles these specific cases and maintains accuracy on the broader dataset.

📝 FINAL NOTE: If high accuracy samples exist so far, you can use parts of them for inspiration. Build incrementally upon proven approaches while adding creative innovations using basic mathematical operations. Never repeat code in its entirety - always modify and improve upon successful patterns. Combine the best elements from high-performing functions with new mathematical discoveries.
